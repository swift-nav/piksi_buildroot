#!/bin/sh

# shellcheck disable=SC1091,SC2169,SC2039

export name="piksi_firmware"
source /etc/init.d/common.sh

export log_tag=$name # required by logging.sh
source /etc/init.d/logging.sh

setup_loggers

uart_wait_count_limit=2000 # wait 200s
uart_check_interval=0.1

svc_path()
{
  echo "/var/run/ports_daemon/sv/${1}/supervise/stat"
}

port_disabled()
{
  local the_port=$1; shift
  local port_mode=

  port_mode=$(query_config --section "$the_port" --key mode)

  # If it's explicitly set to SBP mode, then it's not disabled, if it's empty
  #   then the default is SBP and it's not disabled:
  if [[ "$port_mode" == "SBP" ]] || [[ -z "$port_mode" ]]; then
    return 1
  fi

  # If any other mode, it's effectively "disabled" for this check

  return 0
}

service_up()
{
  local svc=$1; shift
  local the_svc_path=

  the_svc_path=$(svc_path "$svc")

  if port_disabled "$svc"; then
    return 0
  fi

  grep -q run "$the_svc_path"
}

services_up()
{
  service_up uart0 && service_up uart1
}

wait_services()
{
  local uart_wait_count=0
  while ! services_up; do
    if [[ $uart_wait_count -ge $uart_wait_count_limit ]]; then
      loge --sbp "Timeout expired while waiting for UARTs"
      break;
    fi
    sleep $uart_check_interval
    uart_wait_count=$(( uart_wait_count + 1 ))
  done
}

start()
{
  wait_services

  if [ -f "/lib/firmware/piksi_firmware.elf" ]; then
    modprobe zynq_remoteproc
    logi "Remoteproc modprobe complete: $?"
  else
    loge "ERROR: firmware not found"
  fi
}

stop()
{
  rmmod zynq_remoteproc
}

source /etc/init.d/template_command.inc.sh
